# ---------------------------
# Namespace
# ---------------------------
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
# ---------------------------
# Prometheus ConfigMap
# ---------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s

    scrape_configs:
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod

      - job_name: 'odoo'
        metrics_path: /metrics
        static_configs:
          - targets: ['odoo-service.default.svc.cluster.local:8765']


      - job_name: 'postgres'
        static_configs:
          # Scraping Postgres metrics via postgres-exporter
          - targets: ['postgres-exporter-service.monitoring.svc.cluster.local:9187']
---
# ---------------------------
# Prometheus Deployment + Service
# ---------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:v2.54.0
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus/prometheus.yml
              subPath: prometheus.yml  # <-- FIX: mount file instead of dir to avoid Back-off
            - name: prometheus-data
              mountPath: /prometheus
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: monitoring
spec:
  type: NodePort
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
      nodePort: 30090
---
# ---------------------------
# Grafana Deployment + Service + Data Source
# ---------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.4.2
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: admin
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: admin
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
          ports:
            - containerPort: 3000
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
      volumes:
        - name: grafana-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: monitoring
spec:
  type: NodePort
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 31000
---
# ---------------------------
# Grafana Data Source Config (connects to Prometheus)
# ---------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
  labels:
    grafana_datasource: "1"
data:
  prometheus-datasource.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus-service.monitoring.svc.cluster.local:9090
        access: proxy
        isDefault: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-exporter
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-exporter
  template:
    metadata:
      labels:
        app: postgres-exporter
    spec:
      containers:
        - name: postgres-exporter
          image: docker.io/prometheuscommunity/postgres-exporter:v0.18.0
          imagePullPolicy: IfNotPresent
          env:
            - name: DATA_SOURCE_NAME
              value: "postgresql://odoo:odoo@odoo-db.default.svc.cluster.local:5432/odoo?sslmode=disable"
          ports:
            - containerPort: 9187
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-exporter-service
  namespace: monitoring
spec:
  selector:
    app: postgres-exporter
  ports:
    - port: 9187
      targetPort: 9187
